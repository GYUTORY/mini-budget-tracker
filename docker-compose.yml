# Docker Compose 파일 버전 지정 (3.8은 최신 안정 버전)
version: '3.8'

# 실행할 서비스(컨테이너) 정의
services:
  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: budget-tracker-app
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/budget_tracker?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_DATA_MONGODB_URI=mongodb://admin:admin123@mongodb:27017/budget_tracker?authSource=admin
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8080:8080"
    volumes:
      - app-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - budget-tracker-network

  # MySQL 서비스
  mysql:
    image: mysql:8.0
    container_name: budget-tracker-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: budget_tracker
      MYSQL_USER: budget_user
      MYSQL_PASSWORD: budget_password
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - budget-tracker-network

  # MongoDB 서비스
  mongodb:
    image: mongo:latest
    container_name: budget-tracker-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: budget_tracker
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - budget-tracker-network

  # Redis 서비스 (캐시 및 세션 관리용)
  redis:
    image: redis:latest
    container_name: budget-tracker-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - budget-tracker-network

# Docker volume 정의
# 컨테이너가 삭제되어도 데이터를 보존하기 위한 영구 저장소
volumes:
  # MySQL 데이터를 저장할 named volume
  # Docker가 자동으로 볼륨을 생성하고 관리
  mysql-data:
  # MongoDB 데이터를 저장할 named volume
  # Docker가 자동으로 볼륨을 생성하고 관리
  mongodb-data:
  redis-data:
  app-logs:

networks:
  budget-tracker-network:
    driver: bridge 